/*
 * Copyright (c) 2015. Christian Grach <christian.grach@cmgapps.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return !VERSION_NAME.endsWith('-SNAPSHOT')
}

def getRepositoryUrl() {
    if (isReleaseBuild()) {
        return 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    } else {
        return 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.version = VERSION_NAME
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID

                def Properties credentialProps = new Properties()
                credentialProps.load(new FileInputStream(file('credentials.properties')))

                repository(url: getRepositoryUrl()) {
                    authentication(userName: credentialProps['username'], password: credentialProps['password'])
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        options{
            linksOffline 'http://d.android.com/reference', "${android.sdkDirectory}/docs/reference"
            def title = "${POM_NAME} v${VERSION_NAME} API"
            docTitle title
            windowTitle title
        }
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.getBootClasspath().join(File.pathSeparator))
        exclude '**/BuildConfig.java', '**/R.java'
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }

    android.libraryVariants.all { variant ->
        tasks.androidJavadocs.doFirst {
            classpath += files(variant.javaCompile.classpath.files)
        }
    }
}
